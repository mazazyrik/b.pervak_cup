version: '3.9'
services:
  backend:
    build:
      context: .
      dockerfile: app/src/Dockerfile
    container_name: bpc-backend
    environment:
      - TZ=UTC
      - DATABASE_URL=postgres://user:password@db:5432/mydatabase
    volumes:
      - ./media:/app/media
    expose:
      - '8000'
    depends_on:
      - db
    command: uvicorn app.src.main:app --host 0.0.0.0 --port 8000

  db:
    image: postgres:15-alpine
    container_name: bpc-postgres-db
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - '5432:5432'
    
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:latest 
    hostname: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: '1'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: '0'
      KAFKA_CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

  bot:
    build:
      context: .
      dockerfile: app/bot/Dockerfile
    container_name: bpc-bot
    environment:
      - API_BASE_URL=http://backend:8000/api
      - BOT_TOKEN=${BOT_TOKEN}
      - MINI_APP_URL=https://${DOMAIN}
      - RANEPASPORT_CHANNEL=${RANEPASPORT_CHANNEL:-@ranepasport}
      - BALBESCREW_CHANNEL=${BALBESCREW_CHANNEL:-@balbescrew}
      - BDEV_CHANNEL=${BDEV_CHANNEL:-@bdevbync}
    depends_on:
      - backend

  nginx:
    build:
      context: .
      dockerfile: deploy/nginx.Dockerfile
      args:
        - VITE_API_URL=/api
    container_name: bpc-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.ssl.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - backend
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: bpc-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  # aerich_migrations:
